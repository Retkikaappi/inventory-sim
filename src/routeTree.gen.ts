/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ToolsImport } from './routes/tools'
import { Route as InventoryImport } from './routes/inventory'
import { Route as IndexImport } from './routes/index'
import { Route as ToolsSlayerImport } from './routes/tools/slayer'

// Create/Update Routes

const ToolsRoute = ToolsImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsSlayerRoute = ToolsSlayerImport.update({
  id: '/slayer',
  path: '/slayer',
  getParentRoute: () => ToolsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsImport
      parentRoute: typeof rootRoute
    }
    '/tools/slayer': {
      id: '/tools/slayer'
      path: '/slayer'
      fullPath: '/tools/slayer'
      preLoaderRoute: typeof ToolsSlayerImport
      parentRoute: typeof ToolsImport
    }
  }
}

// Create and export the route tree

interface ToolsRouteChildren {
  ToolsSlayerRoute: typeof ToolsSlayerRoute
}

const ToolsRouteChildren: ToolsRouteChildren = {
  ToolsSlayerRoute: ToolsSlayerRoute,
}

const ToolsRouteWithChildren = ToolsRoute._addFileChildren(ToolsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/slayer': typeof ToolsSlayerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/slayer': typeof ToolsSlayerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRoute
  '/tools': typeof ToolsRouteWithChildren
  '/tools/slayer': typeof ToolsSlayerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/inventory' | '/tools' | '/tools/slayer'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/inventory' | '/tools' | '/tools/slayer'
  id: '__root__' | '/' | '/inventory' | '/tools' | '/tools/slayer'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InventoryRoute: typeof InventoryRoute
  ToolsRoute: typeof ToolsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InventoryRoute: InventoryRoute,
  ToolsRoute: ToolsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inventory",
        "/tools"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/inventory": {
      "filePath": "inventory.tsx"
    },
    "/tools": {
      "filePath": "tools.tsx",
      "children": [
        "/tools/slayer"
      ]
    },
    "/tools/slayer": {
      "filePath": "tools/slayer.tsx",
      "parent": "/tools"
    }
  }
}
ROUTE_MANIFEST_END */
